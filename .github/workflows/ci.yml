name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 'true'
  DOTNET_CLI_TELEMETRY_OPTOUT: 'true'

jobs:
  test:
    name: Test and Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --no-restore --configuration Release

    - name: Run tests with coverage
      run: |
        dotnet test --no-build --configuration Release \
          --collect:"XPlat Code Coverage" \
          --results-directory ./TestResults \
          --logger "trx;LogFileName=test-results.trx" \
          --verbosity normal

    - name: Generate coverage report
      uses: danielpalme/ReportGenerator-GitHub-Action@5.3.11
      with:
        reports: 'TestResults/**/coverage.cobertura.xml'
        targetdir: 'TestResults/coveragereport'
        reporttypes: 'Html;Badges;TextSummary'
        verbosity: 'Info'
        title: 'UContentMapper Code Coverage'
        tag: '${{ github.run_number }}_${{ github.run_id }}'

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./TestResults/**/coverage.cobertura.xml
        directory: ./TestResults
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
        verbose: true
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          TestResults/test-results.trx
          TestResults/coveragereport/
          TestResults/**/coverage.*

    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Test Results
        path: TestResults/test-results.trx
        reporter: dotnet-trx
        fail-on-error: true
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        recreate: true
        path: TestResults/coveragereport/Summary.txt

  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --no-restore --configuration Release

    - name: Pack NuGet packages
      run: |
        dotnet pack UContentMapper.Core/UContentMapper.Core.csproj --no-build --configuration Release --output ./packages
        dotnet pack UContentMapper.Umbraco15/UContentMapper.Umbraco15.csproj --no-build --configuration Release --output ./packages
        dotnet pack UContentMapper.Extensions/UContentMapper.Extensions.csproj --no-build --configuration Release --output ./packages

    - name: Upload packages
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ./packages/*.nupkg

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Run security audit
      run: dotnet list package --vulnerable --include-transitive

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: csharp

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [test, build, security-scan]
    if: always()

    steps:
    - name: Check test results
      if: needs.test.result != 'success'
      run: |
        echo "Tests failed or were skipped"
        exit 1

    - name: Check build results
      if: needs.build.result != 'success'
      run: |
        echo "Build failed"
        exit 1

    - name: Check security scan results
      if: needs.security-scan.result != 'success'
      run: |
        echo "Security scan failed"
        exit 1

    - name: Quality gate passed
      run: echo "All quality checks passed successfully!"

  deploy:
    name: Deploy to NuGet
    runs-on: ubuntu-latest
    needs: quality-gate
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: Download packages
      uses: actions/download-artifact@v4
      with:
        name: nuget-packages
        path: ./packages

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Push to NuGet
      run: |
        for package in ./packages/*.nupkg; do
          echo "Pushing $package to NuGet..."
          dotnet nuget push "$package" \
            --source https://api.nuget.org/v3/index.json \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --skip-duplicate
        done